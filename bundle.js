(function (React$1, ReactDOM, d3) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  // const csvUrl =
  // 	'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/92b89486844866ec22d9eee2cc59f1da9d5e05ae/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv';

  const csvUrl =
    'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv';

  const sum = (accumulator, currentValue) =>
    accumulator + currentValue;

  const parseDay = d3.timeParse('%m/%d/%y');

  const transform = (rawData) => {
    const days = rawData.columns.slice(4);
    return days.map((day) => ({
      date: parseDay(day),
      deathTotal: rawData.map((d) => +d[day]).reduce(sum, 0),
    }));
  };

  const useData = () => {
    const [data, setData] = React$1.useState();
    React$1.useEffect(() => {
      d3.csv(csvUrl).then((rawData) => {
        setData(transform(rawData));
      });
    }, []);
    
    console.log(data);

    return data;
  };

  const XMarkerLine = ({value, xScale, innerHeight}) => {
      const markerLineX = xScale(value);
      const markerLineY1 = 0;
      const markerLineY2 = innerHeight;
      return (
        React.createElement( React.Fragment, null,
          ' ',
          React.createElement( 'line', {
            class: "marker-line", x1: markerLineX, y1: markerLineY1, x2: markerLineX, y2: markerLineY2 }),
          React.createElement( 'text', {
            'text-anchor': "middle", 'alignment-baseline': "hanging", x: markerLineX, y: markerLineY2 - 2 }, "now")
        )
      );
    };

  const YMarkerLine = ({value, yScale, innerWidth}) => {
      const markerLineY = yScale(value);
      const markerLineX1 = 0;
      const markerLineX2 = innerWidth;
      return (
        React.createElement( React.Fragment, null,
          ' ',
          React.createElement( 'line', {
            class: "marker-line", x1: markerLineX1, y1: markerLineY, x2: markerLineX2, y2: markerLineY }),
          React.createElement( 'text', {
            'text-anchor': "middle", 'alignment-baseline': "hanging", x: markerLineX1 - 12, y: markerLineY + 5 }, "1,000,000")
        )
      );
    };

  const XAxis = ({ xScale, innerHeight }) => {
    const ref = React$1.useRef();
    React$1.useEffect(() => {
      const xAxisG = d3.select(ref.current);
      const xAxis = d3.axisBottom(xScale)
        .tickSize(-innerHeight)
        .tickPadding(12);
      xAxisG.call(xAxis);
    }, []);
    return (
      React.createElement( 'g', {
        transform: `translate(0,${innerHeight})`, ref: ref })
    );
  };

  const xValue = (d) => d.date;
  const yValue = (d) => d.deathTotal;

  const margin = { top: 50, right: 70, bottom: 50, left: 50 };

  const LineChart = ({ data, width, height }) => {
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;

    const xScale = d3.scaleTime()
      .domain(d3.extent(data, xValue))
      .range([0, innerWidth]);

    const yScale = d3.scaleLinear()
      .domain([0, d3.max(data, yValue)])
      .range([innerHeight, 0]);

    const lineGenerator = d3.line()
      .x((d) => xScale(xValue(d)))
      .y((d) => yScale(yValue(d)));

    const mostRecentDate = xScale.domain()[1];

    return (
      React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', {
          transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( YMarkerLine, {
            value: 1000000, yScale: yScale, innerWidth: innerWidth }),
          React$1__default.createElement( XMarkerLine, {
            value: mostRecentDate, xScale: xScale, innerHeight: innerHeight }),
          React$1__default.createElement( XAxis, { xScale: xScale, innerHeight: innerHeight }),
          React$1__default.createElement( 'path', { d: lineGenerator(data) })
        )
      )
    );
  };

  const width = window.innerWidth;
  const height = window.innerHeight;

  const App = () => {
    const data = useData();

    return data ? (
      React$1__default.createElement( LineChart, { data: data, width: width, height: height })
    ) : React$1__default.createElement( 'div', null, "Loading..." );
  };

  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,